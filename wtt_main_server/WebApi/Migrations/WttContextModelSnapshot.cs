// <auto-generated />
using System;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi.Database;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(WttContext))]
    partial class WttContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Database.Common.DbEmailSendLog", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Addressee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSucceeded")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.ToTable("EmailSendLogs");
                });

            modelBuilder.Entity("Models.Database.Common.DbUser", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("EmailConfirmedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("bytea");

                    b.Property<DateTime>("PasswordLastChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("bytea");

                    b.Property<string>("RegistrationCity")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationCountry")
                        .HasColumnType("text");

                    b.Property<IPAddress>("RegistrationIPAddress")
                        .IsRequired()
                        .HasColumnType("inet");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<byte[]>("TotpSecretKeyForSha512")
                        .HasMaxLength(64)
                        .HasColumnType("bytea");

                    b.HasKey("Guid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Database.Infrastructure.DbJwtIdentifier", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<IPAddress>("IPAddress")
                        .HasColumnType("inet");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("JtiSha512")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("bytea");

                    b.Property<DateTime>("OriginIssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.ToTable("DbJwtIdentifier");
                });

            modelBuilder.Entity("Models.Database.Networking.DbUserImapAccount", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConnectionUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("UserImapAccounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DbUserImapAccount");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.Database.Networking.DbUserProxy", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("UserProxies");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DbUserProxy");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.Database.TestScenarios.DbTestScenario", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string[]>("ArgNames")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int[]>("ArgTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EntryPoint")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.ToTable("TestScenarios");
                });

            modelBuilder.Entity("Models.Database.Networking.DbImapAccount", b =>
                {
                    b.HasBaseType("Models.Database.Networking.DbUserImapAccount");

                    b.Property<int>("SubscriptionRequired")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("DbImapAccount");
                });

            modelBuilder.Entity("Models.Database.Networking.DbProxy", b =>
                {
                    b.HasBaseType("Models.Database.Networking.DbUserProxy");

                    b.Property<int>("SubscriptionRequired")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("DbProxy");
                });
#pragma warning restore 612, 618
        }
    }
}
